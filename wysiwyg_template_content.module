<?php
/**
 * @file
 * Contains hook implementations for the WYSIWYG template module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;
use Drupal\node\NodeTypeInterface;
use Drupal\node\Entity\NodeType;
use Drupal\wysiwyg_template_content\Entity\TemplateContent;
use Drupal\wysiwyg_template_content\Entity\Category;
use Drupal\wysiwyg_template_content\TemplateContentInterface;
use Drupal\wysiwyg_template_content\CategoryInterface;

/**
 * Implements hook_editor_js_settings_alter().
 */
function wysiwyg_template_content_editor_js_settings_alter(array &$settings) {

  // Change url to be node-type-specific if editing a node.
  $route_match = \Drupal::routeMatch();
  if ($route_match->getRouteName() == 'entity.node.edit_form') {
    $node = $route_match->getParameter('node');
    foreach ($settings['editor']['formats'] as $format => $config) {
      if (isset($config['editorSettings']['templates_files'])) {
        $url = \Drupal\Core\Url::fromRoute('wysiwyg_template_content.list_js.type', ['node_type' => $node->getType()]);
        $settings['editor']['formats'][$format]['editorSettings']['templates_files'] = [$url->toString()];
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds WYSIWYG template selection as default node content.
 *
 * @see NodeTypeForm::form()
 */
function wysiwyg_template_content_form_node_type_form_alter(array &$form,FormStateInterface $form_state) {
  /** @var \Drupal\node\NodeTypeInterface $type */
  $type = $form_state->getFormObject()->getEntity();
  $templates = TemplateContent::loadByNodeType($type);
  $form['wysiwyg_template_content'] = [
    '#type' => 'details',
    '#title' => t('WYSIWYG template'),
    '#group' => 'additional_settings',
  ];
  $form['wysiwyg_template_content']['wysiwyg_template_content_default'] = [
    '#type' => 'select',
    '#options' => array_map(function($item) {
      return $item->label();
    }, $templates),
    '#default_value' => $type->getThirdPartySetting('wysiwyg_template_content', 'default_template'),
    '#title' => t('Default template for this content type'),
    '#empty_value' => '',
  ];

  $form['#entity_builders'][] = 'wysiwyg_template_content_form_node_type_form_builder';
}

/**
 * Entity builder for node type with WYSIWYG template options.
 *
 * @see wysiwyg_template_content_form_node_type_form_alter()
 */
function wysiwyg_template_content_form_node_type_form_builder($entity_type, NodeTypeInterface $type, array &$form, FormStateInterface $form_state) {
  $type->setThirdPartySetting('wysiwyg_template_content', 'default_template', $form_state->getValue('wysiwyg_template_content_default'));
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form.
 *
 * Set default content if configured to do so.
 */
function wysiwyg_template_content_form_node_form_alter(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $form_state->getFormObject()->getEntity();
  /** @var \Drupal\node\NodeTypeInterface $type */
  $type = NodeType::load($node->getType());
  if ($node->isNew() && $template_id = $type->getThirdPartySetting('wysiwyg_template_content', 'default_template')) {
    /** @var \Drupal\wysiwyg_template_content\TemplateContentInterface $template */
    $template = TemplateContent::load($template_id);
    $form['body']['widget'][0]['#default_value'] = $template->getBody();
  }
}

function wysiwyg_template_content_load($template_id) {
  return !is_numeric($template_id) ? NULL : \Drupal\wysiwyg_template_content\Entity\TemplateContent::load($template_id);
}

function wysiwyg_template_content_load_multiple(array $template_ids = NULL) {
  return \Drupal\wysiwyg_template_content\Entity\TemplateContent::loadMultiple($template_ids);
}

function wysiwyg_template_content_category_load($category_id) {
  return \Drupal\wysiwyg_template_content\Entity\Category::load($category_id);
}

function wysiwyg_template_content_category_load_multiple(array $category_ids = NULL) {
  return \Drupal\wysiwyg_template_content\Entity\Category::loadMultiple($category_ids);
}

function wysiwyg_template_content_title(TemplateContent $template) {
  return $template->getName();
}

/**
 * Get the names of all categories.
 *
 * @return array
 *   A list of existing category IDs.
 */
function wysiwyg_template_category_get_names() {
  $names = &drupal_static(__FUNCTION__);

  if (!isset($names)) {
    $names = array();
    $config_names = \Drupal::configFactory()->listAll('wysiwyg_template_content.category.');
    foreach ($config_names as $config_name) {
      $id = substr($config_name, strlen('wysiwyg_template_content.category.'));
      $names[$id] = $id;
    }
  }

  return $names;
}

/**
 * Entity URI callback.
 */
function wysiwyg_template_content_uri($template) {
  return new Url('entity.wysiwyg_template_content.canonical', array(
    'wysiwyg_template_content' => $template->id(),
  ));
}
